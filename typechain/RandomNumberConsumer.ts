/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers"
import { FunctionFragment, Result } from "@ethersproject/abi"
import { Listener, Provider } from "@ethersproject/providers"
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common"

export interface RandomNumberConsumerInterface extends utils.Interface {
  contractName: "RandomNumberConsumer"
  functions: {
    "getRandomNumber()": FunctionFragment
    "randomResult()": FunctionFragment
    "rawFulfillRandomness(bytes32,uint256)": FunctionFragment
    "withdrawLink()": FunctionFragment
  }

  encodeFunctionData(functionFragment: "getRandomNumber", values?: undefined): string
  encodeFunctionData(functionFragment: "randomResult", values?: undefined): string
  encodeFunctionData(
    functionFragment: "rawFulfillRandomness",
    values: [BytesLike, BigNumberish]
  ): string
  encodeFunctionData(functionFragment: "withdrawLink", values?: undefined): string

  decodeFunctionResult(functionFragment: "getRandomNumber", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "randomResult", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "rawFulfillRandomness", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "withdrawLink", data: BytesLike): Result

  events: {}
}

export interface RandomNumberConsumer extends BaseContract {
  contractName: "RandomNumberConsumer"
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  interface: RandomNumberConsumerInterface

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>
  listeners(eventName?: string): Array<Listener>
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this
  removeAllListeners(eventName?: string): this
  off: OnEvent<this>
  on: OnEvent<this>
  once: OnEvent<this>
  removeListener: OnEvent<this>

  functions: {
    getRandomNumber(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    randomResult(overrides?: CallOverrides): Promise<[BigNumber]>

    rawFulfillRandomness(
      requestId: BytesLike,
      randomness: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    withdrawLink(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>
  }

  getRandomNumber(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  randomResult(overrides?: CallOverrides): Promise<BigNumber>

  rawFulfillRandomness(
    requestId: BytesLike,
    randomness: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  withdrawLink(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  callStatic: {
    getRandomNumber(overrides?: CallOverrides): Promise<string>

    randomResult(overrides?: CallOverrides): Promise<BigNumber>

    rawFulfillRandomness(
      requestId: BytesLike,
      randomness: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    withdrawLink(overrides?: CallOverrides): Promise<void>
  }

  filters: {}

  estimateGas: {
    getRandomNumber(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>

    randomResult(overrides?: CallOverrides): Promise<BigNumber>

    rawFulfillRandomness(
      requestId: BytesLike,
      randomness: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    withdrawLink(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>
  }

  populateTransaction: {
    getRandomNumber(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    randomResult(overrides?: CallOverrides): Promise<PopulatedTransaction>

    rawFulfillRandomness(
      requestId: BytesLike,
      randomness: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    withdrawLink(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>
  }
}
